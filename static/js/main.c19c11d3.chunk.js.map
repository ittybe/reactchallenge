{"version":3,"sources":["utils/onlyUnique.js","utils/addClassToString.js","utils/removeClassFromString.js","AlphabetPicker.js","EmployeeComponent.js","LetterSection.js","DobMonth.js","data.js","App.js","index.js"],"names":["onlyUnique","array","filter","value","index","indexOf","addClassToString","string","className","classNames","split","push","join","trim","removeClassFromString","AlphabetPicker","props","alphabetArray","useState","pickedLetters","setPickedLetters","letterRefs","useRef","Array","useEffect","map","letter","i","toLowerCase","ref","element","current","onClick","classNameStr","console","log","pickedLettersLocal","replace","handleLetterClick","searchForEmployees","EmployeeComponent","isActive","setIsActive","firstName","lastName","onChange","event","target","handleIsActiveChange","id","defaultChecked","type","name","LetterSection","employees","employee","activeEmployees","length","getEmployeesToDisplay","DobMonth","monthName","dob","a","allEmployees","axios","get","response","data","getAllEmployees","App","state","searchQuery","birthdates","pickerElWrapper","createRef","sessionStorageKey","bind","getEmployeesBirthdates","displayEmployeeBirthdates","sessionStorage","window","jsonToSave","this","setItem","JSON","stringify","then","setState","getItem","parse","query","activeEmployeesLocal","removeid","splice","months","empId","empArr","emp","date","Date","monthIndex","getMonth","options","year","month","day","toLocaleDateString","sort","b","textA","toUpperCase","textB","todayMonthIndex","resultBirthdates","getEmployeesStartWithLetter","startsWith","getBirthdatesElement","react","Component","ReactDOM","render","path","document","getElementById"],"mappings":"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","file":"static/js/main.c19c11d3.chunk.js","sourcesContent":["export function onlyUnique(array) {\r\n    var unique = array.filter((value, index) => {\r\n        return array.indexOf(value) === index;\r\n    });\r\n    return unique;\r\n}\r\n\r\nexport default onlyUnique;","export function addClassToString(string, className) {\r\n    let classNames = string.split(\" \")\r\n    const index = classNames.indexOf(className);\r\n    if (index === -1) {\r\n        classNames.push(className);\r\n    }\r\n    return classNames.join(\" \").trim()\r\n}\r\n\r\nexport default addClassToString;\r\n","export function removeClassFromString(string, className) {\r\n    let classNames = string.split(\" \")\r\n    const index = classNames.indexOf(className);\r\n    if (index > -1) {\r\n        classNames.splice(index, 1);\r\n    }\r\n    return classNames.join(\" \").trim();\r\n}\r\n\r\nexport default removeClassFromString;","import React, { useState, useRef, createRef, useEffect } from 'react';\r\nimport onlyUnique from './utils/onlyUnique';\r\nimport addClassToString from \"./utils/addClassToString\";\r\nimport removeClassFromString from \"./utils/removeClassFromString\";\r\nimport \"./AlphabetPicker.css\"\r\n\r\nexport function AlphabetPicker(props) {\r\n    const alphabetArray = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\r\n    // states\r\n    const [pickedLetters, setPickedLetters] = useState(\"\");\r\n\r\n    const letterRefs = useRef(new Array());\r\n    const activeClassName = \"alphabet__letter--active\";\r\n\r\n    useEffect(() => {\r\n        setPickedLetters(props.pickedLetters)\r\n        // for (let i = 0; i < letterRefs.length; i++) {\r\n        //     const letterRef = letterRefs[i];\r\n        //     let classNameStr = letterRef.className\r\n        //     const activeClassName = \"alphabet__letter--active\";\r\n\r\n        //     if (!(/.*alphabet__letter--active.*/g.test(classNameStr))\r\n        //         && props.pickedLetters.indexOf(letterRef.current.innerText.toLowerCase()) !== -1) {\r\n        //         classNameStr = addClassToString(classNameStr, activeClassName);\r\n        //         letterRef.className = classNameStr;\r\n        //     }\r\n        // }\r\n    }, [props.pickedLetters])\r\n\r\n    // fucntions\r\n    const handleLetterClick = (letter, i) => {\r\n        // get ref\r\n        const letterRef = letterRefs.current[i]\r\n        let classNameStr = letterRef.className\r\n        console.log(`classNameStr: ${classNameStr}, ${letter}, ${i}`)\r\n        // check if active class exists\r\n\r\n        if (pickedLetters.indexOf(letter.toLowerCase()) !== -1) {\r\n            // and remove it from picked letters\r\n            let pickedLettersLocal = pickedLetters;\r\n            pickedLettersLocal = pickedLettersLocal.replace(letter, '')\r\n            pickedLettersLocal = onlyUnique(pickedLettersLocal.split(\"\")).join(\"\")\r\n            console.log(pickedLettersLocal)\r\n            setPickedLetters(pickedLettersLocal)\r\n        }\r\n        else {\r\n            // and add it to pickedLetters\r\n            let pickedLettersLocal = pickedLetters;\r\n            pickedLettersLocal += letter;\r\n            pickedLettersLocal = onlyUnique(pickedLettersLocal.split(\"\")).join(\"\")\r\n            console.log(pickedLettersLocal)\r\n            setPickedLetters(pickedLettersLocal)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"alphabet-picker\">\r\n            <div className=\"alphabet\">\r\n                {\r\n                    alphabetArray.map((letter, i) => {\r\n                        return (<button\r\n                            key={i}\r\n                            className={`btn btn--alphabet-letter alphabet__letter \r\n                            ${pickedLetters.indexOf(letter.toLowerCase()) !== -1 ? activeClassName : \"\"}`}\r\n                            ref={(element) => letterRefs.current.push(element)}\r\n                            onClick={() => handleLetterClick(letter, i)}>{letter}</button>)\r\n                    })\r\n                }\r\n            </div>\r\n            <div>\r\n                <button className=\"btn btn--alphabet-picker\" onClick={() => props.searchForEmployees(pickedLetters)}>Search</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AlphabetPicker;","import { useState } from \"react\";\r\nimport \"./EmployeeComponent.css\";\r\n\r\nexport function EmployeeComponent(props) {\r\n    // props\r\n    // id\r\n    // firstName\r\n    // lastName\r\n\r\n    const [isActive, setIsActive] = useState(props.isActive)\r\n\r\n\r\n    const onIsActiveChange = (event) => {\r\n        let value = event.target.value;\r\n        setIsActive(value === \"active\");\r\n        console.log(`value onIsActiveChange: ${value}`)\r\n        props.handleIsActiveChange(props.id, value === \"active\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"employee\">\r\n            <div className={`employee__fullname ${isActive ? \"employee__fullname--active\" : \"\"}`}>{props.firstName} {props.lastName}</div>\r\n            <form className=\"employee__form\">\r\n                <div onChange={onIsActiveChange}>\r\n                    <label className=\"employee__input-container\">Not Active\r\n                        <input className=\"employee__input\" defaultChecked={isActive === false} type=\"radio\" value=\"notactive\" name=\"IsActive\" />\r\n                        <span className=\"employee__checkmark\"></span>\r\n                    </label>\r\n                    <label className=\"employee__input-container\">Active\r\n                        <input className=\"employee__input\" defaultChecked={isActive === true} type=\"radio\" value=\"active\" name=\"IsActive\" />\r\n                        <span className=\"employee__checkmark\"></span>\r\n                    </label>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EmployeeComponent;","import { useState } from \"react\";\r\nimport EmployeeComponent from \"./EmployeeComponent\";\r\nimport \"./LetterSection.css\";\r\n\r\nexport function LetterSection(props) {\r\n    // props\r\n    // employees\r\n    // letter\r\n    // activeEmployees\r\n    const getEmployeesToDisplay = () => {\r\n        let employees = props.employees.map((employee, i) => {\r\n            const isActive = props.activeEmployees.indexOf(employee.id) !== -1 ? true : false;\r\n            return (<EmployeeComponent \r\n                key={employee.id} \r\n                id={employee.id} \r\n                firstName={employee.firstName} \r\n                lastName={employee.lastName} \r\n                isActive={isActive} \r\n                handleIsActiveChange={props.handleIsActiveChange}/>)\r\n        })\r\n        return employees.length > 0 ? employees : <div className=\"lettersection__noemployees\">No Employees</div>\r\n    }\r\n    return (\r\n        <div className=\"lettersection\">\r\n            <div className=\"lettersection__heading\">{props.letter}</div>\r\n            <div className=\"lettersection__employees\">\r\n                {\r\n                    getEmployeesToDisplay()\r\n                }\r\n            </div>\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default LetterSection;","import \"./DobMonth.css\";\r\n\r\nexport function DobMonth(props) {\r\n    // props\r\n    // monthName\r\n    // employees array\r\n    const getEmployeesToDisplay = () => {\r\n        let employees = props.employees.map((employee, i) => {\r\n            return <li className=\"month__employee\" key={employee.id}>{employee.firstName} {employee.lastName} - {employee.dob}</li>\r\n        })\r\n\r\n        return employees.length > 0 ? employees : <li className=\"month__employee\">No employees</li> ;\r\n    }\r\n    return (\r\n        <div className=\"month\">\r\n            <div className=\"month__heading\">{props.monthName}</div>\r\n            <div>\r\n                <ul className=\"month__employees-list\">\r\n                {\r\n                    getEmployeesToDisplay()\r\n                }\r\n                </ul>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DobMonth;","import axios from 'axios';\r\n\r\nexport async function getAllEmployees() {\r\n    let allEmployees = [];\r\n    // Make a request for a user with a given ID\r\n    const response = await axios.get('https://yalantis-react-school-api.yalantis.com/api/task0/users')\r\n    allEmployees = response.data;\r\n    return allEmployees;\r\n}\r\n\r\n// const getAllEmployees = new Promise((resolve, reject) => {\r\n//     // Make a request for a user with a given ID\r\n//     axios.get('https://yalantis-react-school-api.yalantis.com/api/task0/users')\r\n//     .then(function (response) {\r\n//     // handle success\r\n//     allEmployees = Array.from(response.data);\r\n//     console.log(allEmployees)\r\n//     })\r\n//     .catch(function (error) {\r\n//     // handle error\r\n//     console.log(error);\r\n//     })    \r\n// })\r\n\r\n\r\nexport default getAllEmployees;","import './App.css';\n\nimport AlphabetPicker from './AlphabetPicker';\nimport EmployeeComponent from './EmployeeComponent';\nimport LetterSection from \"./LetterSection\";\nimport DobMonth from \"./DobMonth\";\n\nimport addClassToString from \"./utils/addClassToString\";\nimport removeClassFromString from \"./utils/removeClassFromString\";\n\nimport react, { useRef, useState, createRef, useEffect } from 'react';\n\nimport getAllEmployees from \"./data\";\n\nimport axios from 'axios';\n\nexport class App extends react.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      employees: [],\n      activeEmployees: [],\n      searchQuery: [],\n      birthdates: []\n    }\n    this.pickerElWrapper = createRef();\n    this.sessionStorageKey = \"allData\";\n    // methods bindings\n    this.searchForEmployees = this.searchForEmployees.bind(this);\n    this.getEmployeesBirthdates = this.getEmployeesBirthdates.bind(this);\n    this.displayEmployeeBirthdates = this.displayEmployeeBirthdates.bind(this);\n    this.handleIsActiveChange = this.handleIsActiveChange.bind(this);\n  }\n\n  componentDidUpdate() {\n    // save session storage after every update\n    const sessionStorage = window.sessionStorage;\n\n    // save \n    let jsonToSave = {\n      activeEmployees: this.state.activeEmployees,\n      searchQuery: this.state.searchQuery,\n      birthdates: this.state.birthdates\n    }\n    console.log(`json to save ${jsonToSave}`)\n    sessionStorage.setItem(this.sessionStorageKey, JSON.stringify(jsonToSave))\n  }\n\n  componentDidMount() {\n    getAllEmployees().then(allEmployees => {\n      this.setState({ employees: allEmployees })\n      console.log(\"employees parsed\")\n    })\n    // session storage load \n    const sessionStorage = window.sessionStorage;\n    if (sessionStorage.getItem(this.sessionStorageKey) !== null) {\n      let data = sessionStorage.getItem(this.sessionStorageKey);\n      console.log(`data after reload: ${data}`)\n      data = JSON.parse(data);\n      this.setState({\n        activeEmployees: data.activeEmployees,\n        searchQuery: data.searchQuery,\n        birthdates: data.birthdates\n      })\n    }\n  }\n\n  searchForEmployees(query) {\n    console.log(`search query: ${query}`)\n    this.pickerElWrapper.current.className = addClassToString(this.pickerElWrapper.current.className, \"hidden\");\n    this.setState({ searchQuery: query.split(\"\") })\n  }\n\n  handleIsActiveChange(id, isActive) {\n    let activeEmployeesLocal = [...this.state.activeEmployees];\n    if (isActive) {\n      activeEmployeesLocal.push(id)\n    }\n    else {\n      let removeid = activeEmployeesLocal.indexOf(id)\n      activeEmployeesLocal.splice(removeid, 1)\n    }\n    console.log(`active employees ${activeEmployeesLocal}`)\n    this.setState({ activeEmployees: activeEmployeesLocal }, () => {\n      console.log(this.state.searchQuery);\n      this.displayEmployeeBirthdates();\n    });\n  }\n  setActiveEmployees(employees) {\n    this.setState({ activeEmployees: employees });\n  }\n  getEmployeesBirthdates() {\n    // new Array(12).fill([]) do not create new instances of array, so if you add to one it will be added to all arrays\n    const birthdates = [[], [], [], [], [], [], [], [], [], [], [], []]\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    const activeEmployees = this.state.activeEmployees;\n    const employees = this.state.employees;\n    for (let i = 0; i < activeEmployees.length; i++) {\n      // get month of emp dob\n      const empId = activeEmployees[i];\n      const empArr = employees.filter((emp) => emp.id === empId);\n      if (empArr.length > 0) {\n        const employee = JSON.parse(JSON.stringify(empArr[0]));\n        const date = new Date(employee.dob);\n        const monthIndex = date.getMonth();\n        // convert employee dob into string\n        var options = { year: 'numeric', month: 'long', day: 'numeric' };\n        console.log(date.toLocaleDateString(\"en-US\", options))\n        employee.dob = date.toLocaleDateString(\"en-US\", options)\n        // add accordinly to the month array\n        birthdates[monthIndex].push(employee);\n      }\n    }\n    // sort all months\n    for (let i = 0; i < birthdates.length; i++) {\n      const month = birthdates[i];\n      birthdates[i] = month.sort(function (a, b) {\n        var textA = a.lastName.toUpperCase();\n        var textB = b.lastName.toUpperCase();\n        return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\n      })\n    }\n    console.log(`birthdates ${birthdates}`);\n\n    // format data\n    // get current month index\n    let today = new Date();\n    let todayMonthIndex = today.getMonth();\n\n    // for loop with i that index\n    let resultBirthdates = [];\n    let index = birthdates.length;\n    for (let i = todayMonthIndex; index > 0; index--) {\n      const month = birthdates[i];\n      resultBirthdates.push({\n        \"monthName\": months[i],\n        \"employees\": month\n      })\n      // increment i or set it to zero\n      i + 1 < birthdates.length ? i++ : i = 0\n    }\n    return resultBirthdates;\n  }\n\n  displayEmployeeBirthdates() {\n    this.setState({ birthdates: this.getEmployeesBirthdates() })\n  }\n\n  render() {\n    const getEmployeesStartWithLetter = (letter) => {\n      let employees = [...this.state.employees]\n      employees = employees.filter(employee => {\n        return employee.firstName.toLowerCase().startsWith(letter)\n      }).sort(function (a, b) {\n        var textA = a.firstName.toUpperCase();\n        var textB = b.firstName.toUpperCase();\n        return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\n      })\n      return employees;\n    }\n    const getBirthdatesElement = () => {\n      let birthdates = this.state.birthdates.map((month, i) => {\n        return <DobMonth key={i} monthName={month.monthName} employees={month.employees} />\n      })\n      return this.state.activeEmployees.length > 0 ? birthdates : <div className=\"months-wrapper__no-employees\">Employees List is empty</div>\n    }\n    return (\n      <div className=\"app\">\n        <div className=\"alphabet-wrapper\" ref={this.pickerElWrapper}>\n          <AlphabetPicker searchForEmployees={this.searchForEmployees} pickedLetters={this.state.searchQuery.join(\"\")}></AlphabetPicker>\n        </div>\n        <div className=\"app__data-wrapper\">\n          <div className=\"employees\">\n            <div className=\"employees__heading\">\n              Employees\n            </div>\n            <div className=\"info-wrapper info-wrapper--lettersection\">\n              {\n                this.state.searchQuery.map((letter, i) => {\n                  return <LetterSection\n                    letter={letter.toUpperCase()}\n                    key={i}\n                    employees={getEmployeesStartWithLetter(letter)}\n                    activeEmployees={this.state.activeEmployees}\n                    handleIsActiveChange={this.handleIsActiveChange} />\n                })\n              }\n            </div>\n          </div>\n          <div className=\"birthdates\">\n            <div className=\"birthdates__heading\">\n              Employees Birthday\n            </div>\n            <div className=\"info-wrapper\">\n            {\n              getBirthdatesElement()\n            }\n            </div>\n            \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// function App() {\n//   const [employees, setEmployees] = useState([])\n//   const [activeEmployees, setActiveEmployees] = useState({})\n//   const [searchQuery, setSearchQuery] = useState([])\n\n//   const pickerElWrapper = useRef(null);\n//   useEffect(\n//     () => {\n//       getAllEmployees().then(allEmployees => {\n//         setEmployees(allEmployees)\n//         console.log(\"employees parsed\")\n//       })\n//     }\n//   )\n\n//   const searchForEmployees = (query) => {\n//     console.log(`search query: ${query}`)\n//     pickerElWrapper.current.className = addClassToString(pickerElWrapper.current.className, \"hidden\");\n//     setSearchQuery(query.split(\"\"))\n//   }\n\n//   const getEmployeesStartWithLetter = (letter) => {\n//     const tmp = [...employees].filter(employee => { employee.firstName.startsWith(letter) })\n//     console.log(`letter ${letter} employees ${tmp}`)\n//     return tmp;\n//   }\n//   getEmployeesStartWithLetter(\"a\");\n//   return (\n//     <div className=\"App\">\n//       <div ref={pickerElWrapper}>\n//         <AlphabetPicker searchForEmployees={searchForEmployees}></AlphabetPicker>\n//       </div>\n//       <div>\n//         {/* {\n//           searchQuery.map((letter, i) => {\n//             return <LetterSection key={i} letter={letter} employees={getEmployeesStartWithLetter(letter)} activeEmployees={activeEmployees}/>\n//           })\n//         } */}\n//       </div>\n//     </div>\n//   );\n// }\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {\n  BrowserRouter,\n  Routes,\n  Route\n} from \"react-router-dom\";\nReactDOM.render(\n  \n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/reactchallenge/employees\" element={<App/>}/>\n      </Routes>\n    </BrowserRouter>\n  ,\n  document.getElementById('root')\n);"],"sourceRoot":""}